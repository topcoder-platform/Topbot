service: centralBotLambda

provider:
  name: aws
  runtime: nodejs10.x
  profile: bot-dev
  stage: local # local development only

  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'sns:Publish'
        - 'sns:GetTopicAttributes'
      Resource:
        - !Ref tcSlackEvents
        - !Ref tcSlackInteractive
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource:
        - Fn::GetAtt: [ ProjectsTable, Arn ]
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource:
        - Fn::GetAtt: [ ProjectsTable, Arn ]

  environment:
    # AWS configuration
    ACCESS_KEY_ID: DEFAULT_ACCESS_KEY
    SECRET_ACCESS_KEY: DEFAULT_SECRET
    REGION: localhost
    DYNAMODB_ENDPOINT: http://localhost:8000

    # TC Slack bot configuration
    ADMIN_USER_TOKEN:
    BOT_TOKEN:
    CHANNEL: general
    CLIENT_SIGNING_SECRET:

    # Slack Lambda configuration
    SLACK_LAMBDA_URI: 'http://localhost:3001'

    # Teams lambda configuration
    TEAMS_LAMBDA_URI: 'http://localhost:3002'

    # Topcoder connect configuration
    CONNECT_BEARER_TOKEN:

    # SNS Configuration
    SNS_ENDPOINT: http://localhost:4000 # local development only
    SNS_REGION: ${self:custom.region}
    SNS_ACCOUNT_ID: 123456789012

    # SNS Topics
    TC_SLACK_EVENTS_TOPIC: ${self:custom.sns.tcSlackEvents}
    TC_SLACK_INTERACTIVE_TOPIC: ${self:custom.sns.tcSlackInteractive}

functions:
  tc_slack_events:
    handler: src/functions/receiver/events.handler
    description: Handles slack events from TC Slack
    events:
      - http:
          path: slack/events
          method: post

  tc_slack_interactive:
    handler: src/functions/receiver/interactive.handler
    description: Handles slack interactive messages from TC Slack
    events:
      - http:
          path: slack/interactive
          method: post

  request:
    handler: src/functions/request.handler
    description: Create a project with description
    events:
      - http:
          path: request
          method: post

  events:
    handler: src/functions/events.handler
    description: Handles slack events
    events:
      - sns:
          arn: !Ref tcSlackEvents
          topicName: ${self:custom.sns.tcSlackEvents}

  interactive:
    handler: src/functions/interactive.handler
    description: Handles slack interactive messages
    events:
      - sns:
          arn: !Ref tcSlackInteractive
          topicName: ${self:custom.sns.tcSlackInteractive}

  accept:
    handler: src/functions/accept.handler
    description: Handles project accept
    events:
      - http:
          path: accept
          method: post

  decline:
    handler: src/functions/decline.handler
    description: Handles project decline
    events:
      - http:
          path: decline
          method: post

  invite:
    handler: src/functions/invite.handler
    description: Handles project invite
    events:
      - http:
          path: invite
          method: post

plugins:
  - serverless-offline-sns
  - serverless-dynamodb-local
  - serverless-offline

custom:
  serverless-offline-sns:
    port: 4000
    debug: false
  sns:
    tcSlackEvents: tc-slack-events
    tcSlackInteractive: tc-slack-interactive
  dynamodb:
    stages:
      - local
  region: ${opt:region, self:provider.region}

resources:
  Resources:
    tcSlackEvents:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.sns.tcSlackEvents}
    tcSlackInteractive:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.sns.tcSlackInteractive}
    Test:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: test
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    ProjectsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: projects
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: clientSlackThread
            AttributeType: S
          - AttributeName: teamsConversationId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: client_slack_thread_index
            KeySchema:
              - AttributeName: clientSlackThread
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: teams_conversation_id_index
            KeySchema:
              - AttributeName: teamsConversationId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    ClientsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: slack_clients
        AttributeDefinitions:
          - AttributeName: teamId
            AttributeType: S
        KeySchema:
          - AttributeName: teamId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
  Outputs:
    ProjectsTableArn:
      Value:
        Fn::GetAtt:
          - ProjectsTable
          - Arn
      Export:
        Name: ProjectsTableArn
    ClientsTableArn:
      Value:
        Fn::GetAtt:
          - ClientsTable
          - Arn
      Export:
        Name: ClientsTableArn
