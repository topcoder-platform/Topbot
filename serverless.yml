service: BotLambda

provider:
  name: aws
  runtime: nodejs10.x
  profile: bot-dev
  stage: ${opt:stage, 'local'}
  region: ${env:REGION}

  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'sns:Publish'
        - 'sns:GetTopicAttributes'
      Resource:
        - !Ref tcSlackEvents
        - !Ref tcSlackInteractive
    - Effect: 'Allow'
      Action:
        - 'sns:Publish'
        - 'sns:GetTopicAttributes'
      Resource:
        - !Ref clientSlackEvents
        - !Ref clientSlackInteractive
    - Effect: 'Allow'
      Action:
        - 'sns:Publish'
        - 'sns:GetTopicAttributes'
      Resource:
        - !Ref clientTeamsEvents
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource:
        - Fn::GetAtt: [ ProjectsTable, Arn ]
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource:
        - Fn::GetAtt: [ ClientsTable, Arn ]

  environment:
    # AWS configuration
    ACCESS_KEY_ID: ${env:ACCESS_KEY_ID}
    SECRET_ACCESS_KEY: ${env:SECRET_ACCESS_KEY}
    REGION: ${self:custom.region}
    DYNAMODB_ENDPOINT: ${env:DYNAMODB_ENDPOINT,''} # local development only.

    # TC Slack bot configuration
    TC_SLACK_ADMIN_USER_TOKEN: ${env:TC_SLACK_ADMIN_USER_TOKEN}
    TC_SLACK_BOT_TOKEN: ${env:TC_SLACK_BOT_TOKEN}
    TC_SLACK_CHANNEL: ${env:TC_SLACK_CHANNEL}
    TC_SLACK_CLIENT_SIGNING_SECRET: ${env:TC_SLACK_CLIENT_SIGNING_SECRET}

    #Client Slack bot configuration
    CLIENT_SLACK_CLIENT_ID: ${env:CLIENT_SLACK_CLIENT_ID} # use single quotes(') to wrap a value
    CLIENT_SLACK_CLIENT_SECRET: ${env:CLIENT_SLACK_CLIENT_SECRET}
    CLIENT_SLACK_CLIENT_SIGNING_SECRET: ${env:CLIENT_SLACK_CLIENT_SIGNING_SECRET}
    CLIENT_SLACK_ADD_TO_SLACK_BUTTON: ${env:CLIENT_SLACK_ADD_TO_SLACK_BUTTON} # use single quotes(') to wrap a value

    # MS Teams bot configuration
    CLIENT_TEAMS_APP_ID: ${env:CLIENT_TEAMS_APP_ID}
    CLIENT_TEAMS_APP_PASSWORD: ${env:CLIENT_TEAMS_APP_PASSWORD} # use single quotes(') to wrap a value

    # 128 bit Token encryption/decryption key used by Database. You can set this to any string (128 bit) or just use the default value provided here
    CRYPTO_KEY: ${env:CRYPTO_KEY}

    # Lambda URI
    CLOUDWATCH_LOGGING_ERRORS: ${env:CLOUDWATCH_LOGGING_ERRORS, false}
    LAMBDA_URI: ${self:custom.lambda_uri}

    # Slack Lambda configuration
    SLACK_LAMBDA_URI: ${self:custom.lambda_uri}/client-slack

    # Teams lambda configuration
    TEAMS_LAMBDA_URI: ${self:custom.lambda_uri}/client-teams

    # Topcoder connect configuration
    CONNECT_BEARER_TOKEN: ${env:CONNECT_BEARER_TOKEN}

    # SNS Configuration
    SNS_REGION: ${self:custom.region}
    SNS_ACCOUNT_ID: ${env:ACCOUNT_ID, ''}
    SNS_ENDPOINT: ${env:SNS_ENDPOINT_HOST, ''}:${env:SNS_ENDPOINT_PORT,''} # local development only

    # TC Slack SNS Topics
    TC_SLACK_EVENTS_TOPIC: ${self:custom.sns.tcSlackEvents}
    TC_SLACK_INTERACTIVE_TOPIC: ${self:custom.sns.tcSlackInteractive}

    # Client Slack SNS Topics
    CLIENT_SLACK_EVENTS_TOPIC: ${self:custom.sns.clientSlackEvents}
    CLIENT_SLACK_EVENTS_INTERACTIVE: ${self:custom.sns.clientSlackInteractive}

    # MS Teams SNS Topics
    CLIENT_TEAMS_EVENTS_TOPIC: ${self:custom.sns.clientTeamsEvents}
functions:
  tc_slack_events:
    handler: src/tc-slack/functions/receiver/events.handler
    description: Handles slack events from TC Slack
    events:
      - http:
          path: tc-slack/events
          method: post

  tc_slack_interactive:
    handler: src/tc-slack/functions/receiver/interactive.handler
    description: Handles slack interactive messages from TC Slack
    events:
      - http:
          path: tc-slack/interactive
          method: post

  client_slack_events:
    handler: src/client-slack/functions/receiver/events.handler
    description: Handles slack events from Client Slack
    events:
      - http:
          path: client-slack/events
          method: post

  client_slack_interactive:
    handler: src/client-slack/functions/receiver/interactive.handler
    description: Handles slack interactive messages from Client Slack
    events:
      - http:
          path: client-slack/interactive
          method: post

  tc_slack_request:
    handler: src/tc-slack/functions/request.handler
    description: Create a project with description
    events:
      - http:
          path: tc-slack/request
          method: post

  tc_slack_sns_events:
    handler: src/tc-slack/functions/events.handler
    description: Handles slack events
    events:
      - sns:
          arn: !Ref tcSlackEvents
          topicName: ${self:custom.sns.tcSlackEvents}

  tc_slack_sns_interactive:
    handler: src/tc-slack/functions/interactive.handler
    description: Handles slack interactive messages
    events:
      - sns:
          arn: !Ref tcSlackInteractive
          topicName: ${self:custom.sns.tcSlackInteractive}

  tc_slack_accept:
    handler: src/tc-slack/functions/accept.handler
    description: Handles project accept
    events:
      - http:
          path: tc-slack/accept
          method: post

  tc_slack_decline:
    handler: src/tc-slack/functions/decline.handler
    description: Handles project decline
    events:
      - http:
          path: tc-slack/decline
          method: post

  tc_slack_invite:
    handler: src/tc-slack/functions/invite.handler
    description: Handles project invite
    events:
      - http:
          path: tc-slack/invite
          method: post
  client_slack_sns_events:
    handler: src/client-slack/functions/events.handler
    description: Handles slack events
    events:
      - sns:
          arn: !Ref clientSlackEvents
          topicName: ${self:custom.sns.clientSlackEvents}

  client_slack_sns_interactive:
    handler: src/client-slack/functions/interactive.handler
    description: Handles interactive components
    events:
      - sns:
          arn: !Ref clientSlackInteractive
          topicName: ${self:custom.sns.clientSlackInteractive}

  client_slack_response:
    handler: src/client-slack/functions/response.handler
    description: Handles project response
    events:
      - http:
          path: client-slack/response
          method: post

  client_slack_approve:
    handler: src/client-slack/functions/approve.handler
    description: Receives project approve
    events:
      - http:
          path: client-slack/approve
          method: post

  client_slack_signIn:
    handler: src/client-slack/functions/signIn.handler
    description: Returns the Add to slack button to sign in
    events:
      - http:
          path: client-slack/signin
          method: get

  client_slack_auth:
    handler: src/client-slack/functions/auth.handler
    description: Handles oauth redirect
    events:
      - http:
          path: client-slack/auth/redirect
          method: get
  client_teams_events:
    handler: src/client-teams/functions/receiver/events.handler
    description: Handles ms teams events
    events:
      - http:
          path: client-teams/events
          method: post

  client_teams_sns_events:
    handler: src/client-teams/functions/events.handler
    description: Handles ms teams events
    events:
      - sns:
          arn: !Ref clientTeamsEvents
          topicName: ${self:custom.sns.clientTeamsEvents}

  client_teams_response:
    handler: src/client-teams/functions/response.handler
    description: Handles project response
    events:
      - http:
          path: client-teams/response
          method: post

  client_teams_approve:
    handler: src/client-teams/functions/approve.handler
    description: Receives project approve
    events:
      - http:
          path: client-teams/approve
          method: post

plugins:
  - serverless-dotenv-plugin
  - serverless-offline-sns
  - serverless-dynamodb-local
  - serverless-domain-manager
  - serverless-offline

custom:
  lambda_uri: ${env:LAMBDA_URL,'https://${self:custom.customDomain.domainName}/topbot'}
  serverless-offline-sns:
    port:  ${env:SNS_ENDPOINT_PORT,''}
    debug: false
  sns:
    tcSlackEvents: tc-slack-events
    tcSlackInteractive: tc-slack-interactive
    clientSlackEvents: client-slack-events
    clientSlackInteractive: client-slack-interactive
    clientTeamsEvents: client-teams-events
  dynamodb:
    stages:
      - local
  region: ${opt:region, self:provider.region}
  customDomain:
    domainName: ${env:CUSTOM_DOMAIN_NAME,''}
    basePath: 'topbot'
    stage: ${self:provider.stage}
    createRoute53Record: true
    certificateArn: ${env:CUSTOM_DOMAIN_CERTIFICATE_ARN,''}
resources:
  Resources:
    tcSlackEvents:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.sns.tcSlackEvents}
    tcSlackInteractive:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.sns.tcSlackInteractive}
    clientSlackEvents:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.sns.clientSlackEvents}
    clientSlackInteractive:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.sns.clientSlackInteractive}
    clientTeamsEvents:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.sns.clientTeamsEvents}
    ProjectsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: projects
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: clientSlackThread
            AttributeType: S
          - AttributeName: teamsConversationId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: client_slack_thread_index
            KeySchema:
              - AttributeName: clientSlackThread
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: teams_conversation_id_index
            KeySchema:
              - AttributeName: teamsConversationId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    ClientsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: slack_clients
        AttributeDefinitions:
          - AttributeName: teamId
            AttributeType: S
        KeySchema:
          - AttributeName: teamId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
  Outputs:
    ProjectsTableArn:
      Value:
        Fn::GetAtt:
          - ProjectsTable
          - Arn
      Export:
        Name: AGProjectsTableArn
    ClientsTableArn:
      Value:
        Fn::GetAtt:
          - ClientsTable
          - Arn
      Export:
        Name: AGClientsTableArn
